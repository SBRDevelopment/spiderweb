/** @jsx React.DOM */

var React = require('react');
var Settings = require('../models/Settings')

AppSetting = React.createClass({
	getInitialState: function() {
		return {
			editMode: AppSetting.mode.saved,
			timeout: undefined,
			settings: new Settings(),
			value: undefined
		}
	},	
	componentDidMount: function() {
		this.state.settings.url += '/' + encodeURIComponent(this.props.task.id.replace(/^\//g, ''))
		this.state.settings.on('sync', this.forceUpdate.bind(this, null))
		this.state.settings.on('sync', this.props.onUpdateTemplate)
		this.state.settings.fetch()
	},
  	getSetting: function(id) {
  		var setting = this.state.settings.get(id)
  		if(!setting || this.state.value != undefined) {
  			return this.state.value
  		} else {
  			return setting.get('data')	
  		}
  	},
  	updateOptions: function(e) {
		if(this.state.editMode == AppSetting.mode.writing) {
  			clearTimeout(this.state.timeout)
  		}
  		this.setState({
  			editMode: AppSetting.mode.writing,
  			value: e.target.value,
  			timeout: setTimeout(this.onUpdate.bind(this, 'options', e.target.value), 500)
  		})
  	},
  	onUpdate: function(id, data) {
  		var setting = this.state.settings.get(id)
  		if(!setting) {
  			setting = new this.state.settings.model({id: id})
  			setting = this.state.settings.add(setting)
  		}

	  	var _this = this
	  	var timeout = setTimeout(this.onError, 2000)
		setting.save({data: data}, {
  			timeout: 2000,
  			failure: function(model, response) {
  				_this.onError(response)
  			},
  			success: function(model, response) {
  				clearTimeout(timeout)
  				_this.setState({editMode: AppSetting.mode.saved})
  			}
		})
  	},  	
  	onError: function(error) {
		this.setState({editMode: AppSetting.mode.error, message: error || "Unknown Error"})
  	},
	render: function() {
		return (
			<div className="panel panel-default">
			  <div className="panel-heading">
			    <h3 className="panel-title">{this.props.task.id}</h3>
			  </div>
			  <div className="panel-body">
				<form>
				  <div className="form-group">
    				<label for="haproxyOptions">Haproxy Options</label>
				  	<textarea className="form-control" ref="haproxyOptions" rows="5" value={this.getSetting('options')} onChange={this.updateOptions}></textarea>
				  </div>
				</form>
			  </div>
			</div>
		);
	}
});

AppSetting.mode = {
	saved: 1,
	writing: 2,
	error: 3
}

module.exports = AppSetting